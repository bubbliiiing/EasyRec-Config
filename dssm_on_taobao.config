#------------------------------------------------------#
#   训练用的数据文件地址
#------------------------------------------------------#
train_input_path: "data/test/tb_data/taobao_train_data"
#------------------------------------------------------#
#   评估用的数据文件地址
#------------------------------------------------------#
eval_input_path: "data/test/tb_data/taobao_test_data"
#------------------------------------------------------#
#   训练好的权值保存的路径
#------------------------------------------------------#
model_dir         : "experiments/dssm"

#------------------------------------------------------#
#   训练相关的参数
#------------------------------------------------------#
train_config {
  #------------------------------------------------------#
  #   optimizer_config      优化器参数
  #------------------------------------------------------#
  optimizer_config: {
    #------------------------------------------------------#
    #   adam_optimizer                    Adam优化器
    #   learning_rate                     学习率下降方式
    #   exponential_decay_learning_rate   指数下降
    #   initial_learning_rate             初始学习率
    #   decay_steps                       学习率衰减步长
    #   decay_factor                      衰减倍数
    #   min_learning_rate                 最低学习率
    #------------------------------------------------------#
    adam_optimizer: {
      learning_rate: {
        exponential_decay_learning_rate {
          initial_learning_rate : 0.001
          decay_steps           : 1000
          decay_factor          : 0.5
          min_learning_rate     : 0.00001
        }
      }
    }
    use_moving_average: false
  }
  #------------------------------------------------------#
  #   sync_replicas             是否梯度同步
  #   save_checkpoints_steps    保存周期
  #   log_step_count_steps      log记录周期
  #   num_steps                 总训练步长
  #------------------------------------------------------#
  sync_replicas           : true
  save_checkpoints_steps  : 100
  log_step_count_steps    : 100
  num_steps               : 2500
} 

#------------------------------------------------------#
#   评估参数
#   推荐系统一般使用AUC进行评估
#------------------------------------------------------#
eval_config {
  metrics_set: {
    auc {}
  }
}

#------------------------------------------------------#
#   数据集的各类数据情况
#------------------------------------------------------#
data_config {
  #------------------------------------------------------#
  #   需要注意的时，此处的数据顺序需要和csv中一样。
  #   input_name  代表该列数据的名称
  #   input_type  代表该列数据的数据类别，默认是STRING。
  #   default_val 代表默认值，可以不设置
  #------------------------------------------------------#
  input_fields {
    input_name:'clk'
    input_type: INT32
  }
  input_fields {
    input_name:'buy'
    input_type: INT32
  }
  input_fields {
    input_name: 'pid'
    input_type: STRING
  }
  input_fields {
    input_name: 'adgroup_id'
    input_type: STRING
  }
  input_fields {
    input_name: 'cate_id'
    input_type: STRING
  }
  input_fields {
    input_name: 'campaign_id'
    input_type: STRING
  }
  input_fields {
    input_name: 'customer'
    input_type: STRING
  }
  input_fields {
    input_name: 'brand'
    input_type: STRING
  }
  input_fields {
    input_name: 'user_id'
    input_type: STRING
  }
  input_fields {
    input_name: 'cms_segid'
    input_type: STRING
  }
  input_fields {
    input_name: 'cms_group_id'
    input_type: STRING
  }
  input_fields {
    input_name: 'final_gender_code'
    input_type: STRING
  }
  input_fields {
    input_name: 'age_level'
    input_type: STRING
  }
  input_fields {
    input_name: 'pvalue_level'
    input_type: STRING
  }
  input_fields {
    input_name: 'shopping_level'
    input_type: STRING
  }
  input_fields {
    input_name: 'occupation'
    input_type: STRING
  }
  input_fields {
    input_name: 'new_user_class_level'
    input_type: STRING
  }
  input_fields {
    input_name: 'tag_category_list'
    input_type: STRING
  }
  input_fields {
    input_name: 'tag_brand_list'
    input_type: STRING
  }
  input_fields {
    input_name: 'price'
    input_type: INT32
  }

  #------------------------------------------------------#
  #   列名必须在data_config中出现过，代表为标签
  #------------------------------------------------------#
  label_fields: 'clk'

  #------------------------------------------------------#
  #   batch_size    批次大小
  #   num_epochs    这个num_epoch其实没什么用，
  #                 和上面的num_step取小，
  #                 一般以num_step为主。
  #   prefetch_size 提高数据加载的速度，防止数据瓶颈
  #------------------------------------------------------#
  batch_size: 4096
  num_epochs: 10000
  prefetch_size: 32
  #---------------------------------------------------------------------------#
  #   CSVInput      表示数据格式是CSV，注意要配合separator使用
  #   OdpsInputV2   如果在MaxCompute上运行EasyRec, 则使用OdpsInputV2
  #   OdpsInputV3   如果在本地或者EMR上访问MaxCompute Table, 则使用OdpsInputV3
  #---------------------------------------------------------------------------#
  input_type: CSVInput
}

#------------------------------------------------------#
#   用于作为特征的数据，不包括label
#------------------------------------------------------#
feature_config: {
  #---------------------------------------------------------------------------#
  #   具体设置可参考https://easyrec.readthedocs.io/en/latest/feature/feature.html
  #   input_names       代表该列数据的名称
  #   feature_type      特征类别
  #   embedding_dim     该列数据在经过Embedding处理后的特征长度
  #   hash_bucket_size  将变量hash之后去模
  #---------------------------------------------------------------------------#
  features: {
    # pid => 0-9 => [batch_size,16]
    input_names: 'pid'
    feature_type: IdFeature
    embedding_dim: 16
    hash_bucket_size: 10
  }
  features: {
    input_names: 'adgroup_id'
    feature_type: IdFeature
    embedding_dim: 16
    hash_bucket_size: 100000
  }
  features: {
    input_names: 'cate_id'
    feature_type: IdFeature
    embedding_dim: 16
    hash_bucket_size: 10000
  }
  features: {
    input_names: 'campaign_id'
    feature_type: IdFeature
    embedding_dim: 16
    hash_bucket_size: 100000
  }
  features: {
    input_names: 'customer'
    feature_type: IdFeature
    embedding_dim: 16
    hash_bucket_size: 100000
  }
  features: {
    input_names: 'brand'
    feature_type: IdFeature
    embedding_dim: 16
    hash_bucket_size: 100000
  }
  features: {
    input_names: 'user_id'
    feature_type: IdFeature
    embedding_dim: 16
    hash_bucket_size: 100000
  }
  features: {
    input_names: 'cms_segid'
    feature_type: IdFeature
    embedding_dim: 16
    hash_bucket_size: 100
  }
  features: {
    input_names: 'cms_group_id'
    feature_type: IdFeature
    embedding_dim: 16
    hash_bucket_size: 100
  }
  features: {
    input_names: 'final_gender_code'
    feature_type: IdFeature
    embedding_dim: 16
    hash_bucket_size: 10
  }
  features: {
    input_names: 'age_level'
    feature_type: IdFeature
    embedding_dim: 16
    hash_bucket_size: 10
  }
  features: {
    input_names: 'pvalue_level'
    feature_type: IdFeature
    embedding_dim: 16
    hash_bucket_size: 10
  }
  features: {
    input_names: 'shopping_level'
    feature_type: IdFeature
    embedding_dim: 16
    hash_bucket_size: 10
  }
  features: {
    input_names: 'occupation'
    feature_type: IdFeature
    embedding_dim: 16
    hash_bucket_size: 10
  }
  features: {
    input_names: 'new_user_class_level'
    feature_type: IdFeature
    embedding_dim: 16
    hash_bucket_size: 10
  }
  features: {
     input_names: 'tag_category_list'
     feature_type: TagFeature
     separator: '|'
     hash_bucket_size: 100000
     embedding_dim: 16
  }
  features: {
     input_names: 'tag_brand_list'
     feature_type: TagFeature
     separator: '|'
     hash_bucket_size: 100000
     embedding_dim: 16
  }
  features: {
    input_names: 'price'
    feature_type: IdFeature
    embedding_dim: 16
    num_buckets: 50
  }
}

#------------------------------------------------------#
#   模型参数设置
#------------------------------------------------------#
model_config:{
  #------------------------------------------------------#
  #   模型种类
  #------------------------------------------------------#
  model_class: "DSSM"
  #------------------------------------------------------#
  #   group_name      指定组名
  #   feature_names   该组的特征
  #   wide_deep       模型的记忆能力和泛化能力
  #------------------------------------------------------#
  feature_groups: {
    group_name: 'user'
    # [batch_size, 160]
    feature_names: 'user_id'
    feature_names: 'cms_segid'
    feature_names: 'cms_group_id'
    feature_names: 'age_level'
    feature_names: 'pvalue_level'
    feature_names: 'shopping_level'
    feature_names: 'occupation'
    feature_names: 'new_user_class_level'
    feature_names: 'tag_category_list'
    feature_names: 'tag_brand_list'
    wide_deep:DEEP
  }
  feature_groups: {
    group_name: "item"
    # [batch_size, 112]
    feature_names: 'adgroup_id'
    feature_names: 'cate_id'
    feature_names: 'campaign_id'
    feature_names: 'customer'
    feature_names: 'brand'
    feature_names: 'price'
    feature_names: 'pid'
    wide_deep:DEEP
  }
  #------------------------------------------------------#
  #   user_tower          user塔
  #   item_tower          item塔
  #   dnn                 代表全连接网络的神经元个数
  #   l2_regularization   l2正则化情况
  #------------------------------------------------------#
  dssm {
    # [4096, 32]
    user_tower {
      id: "user_id"
      dnn {
        hidden_units: [256, 128, 64, 32]
        # dropout_ratio : [0.1, 0.1, 0.1, 0.1]
      }
    }
    # [4096, 32]
    item_tower {
      id: "adgroup_id"
      dnn {
        hidden_units: [256, 128, 64, 32]
      }
    }
    l2_regularization: 1e-6
  }
  embedding_regularization: 5e-5
}

export_config {
}
